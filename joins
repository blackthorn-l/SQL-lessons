/* a simple join from a Coursera course */
select 
  distinct artist.name, 
  genre.name 
from 
  artist 
  join album on artist.artist_id = album.artist_id 
  join track on album.album_id = track.album_id 
  join genre on track.genre_id = genre.genre_id 
where 
  artist.name = 'AC/DC'

/* a simple inner join from a Stepic course */
select 
  book.title, 
  genre.name_genre, 
  book.price 
from 
  book 
  inner join genre on book.genre_id = genre.genre_id 
where 
  book.amount > 8 
order by 
  book.price desc

/* a simple left join */
select 
  genre.name_genre 
from 
  genre 
  left join book on genre.genre_id = book.genre_id 
where 
  book.genre_id is null

/* a cross join and random date generator for 2020 (I know it can be done simplier, but it was the first thing I came up with) */
select 
  city.name_city, 
  author.name_author, 
  date_format(
    from_unixtime(
      rand() * (
        unix_timestamp('2020-12-31') - unix_timestamp('2020-01-01')
      ) + unix_timestamp('2020-01-01')
    ), 
    '%Y-%m-%d'
  ) as Date 
from 
  city 
  cross join author 
order by 
  city.name_city, 
  Date desc

/* multiple inner-joins */
select
  genre.name_genre,
  book.title,
  author.name_author
from
  genre
  inner join book on genre.genre_id = book.genre_id
  inner join author on author.author_id = book.author_id
where
  book.genre_id = 1
order by
  book.title

/* left join with grouping */
select 
  author.name_author, 
  sum(book.amount) as Amount 
from 
  author 
  left join book on author.author_id = book.author_id 
group by 
  author.name_author 
having 
  sum(book.amount) < 10 
  or count(book.title) = 0 
order by 
  Amount

/* inner joins with subquery */
select 
  book.title, 
  author.name_author, 
  genre.name_genre, 
  book.price, 
  book.amount 
from 
  book 
  inner join author on author.author_id = book.author_id 
  inner join genre on genre.genre_id = book.genre_id 
where 
  book.genre_id in (
    select 
      query_all_genres.genre_id 
    from 
      (
        select 
          genre_id, 
          sum(amount) as genre_amount 
        from 
          book 
        group by 
          genre_id
      ) query_all_genres 
      inner join (
        select 
          genre_id, 
          sum(amount) as max_amount 
        from 
          book 
        group by 
          genre_id 
        limit 
          1
      ) query_max_amount on query_all_genres.genre_amount = query_max_amount.max_amount
  ) 
order by 
  book.title

/* an example of combined use of ON and USING clause */
select 
  supply.title as title, 
  supply.author as author, 
  (supply.amount + book.amount) as total_amount
from 
  supply 
  inner join book using(price) 
  inner join author on book.author_id = author.author_id

/* an example of diffrent JOIN uses in one query */
select
  author.name_author as author,
  genre.name_genre as genre,
  count(book.title) as number_of_books
from
  author cross join genre
  left join book on book.author_id = author.author_id
  and book.genre_id = genre.genre_id
group by
  author, 
  genre
order by 
  author,
  genre,
  number_of_books

/* three inner joins */
select
  buy_id,
  book.title,
  book.price,
  buy_book.amount
from
  buy
  inner join buy_book using(buy_id)
  inner join book using(book_id)
  inner join client using(client_id)
where
  client.name_client like 'Baranov Pavel'
order by 
  buy_id, 
  book.title

/* inner join, left join and COUNT() function */
select
  author.name_author,
  title,
  count(buy_book.book_id) as Amount
from
  book
  inner join author using(author_id)
  left join buy_book using(book_id)
group by
  title,
  author.name_author
order by 
  author.name_author,
  title

/* several inner joins and COUNT() function */
select 
  name_city, 
  count(name_city) as Amount 
from 
  city 
  inner join client using(city_id) 
  inner join buy using(client_id) 
group by 
  name_city

/* an inner join with several conditions */
select 
  buy_id, 
  date_step_end 
from 
  buy_step 
  inner join step using(step_id) 
where 
  date_step_end is not null 
  and name_step like 'Payment'

/* three inner joins, SUM() function and groupping */
select
  buy_book.buy_id,
  client.name_client,
  sum(buy_book.amount * book.price) as Cost
from
  buy_book
  inner join book using(book_id)
  inner join buy using(buy_id)
  inner join client using(client_id)
group by
  buy_book.buy_id,
  client.name_client
order by
  buy_book.buy_id

/* an inner join and several conditions */
select 
  buy_id, 
  name_step 
from 
  buy_step 
  inner join step using(step_id) 
where 
  date_step_beg is not null 
  and date_step_end is null 
order by 
  buy_id

/* four inner joins, several conditions and DATEDIFF() function */
select 
  buy_step.buy_id, 
  datediff(
    buy_step.date_step_end, buy_step.date_step_beg
  ) as Delivery_days, 
  if(
    datediff(
      buy_step.date_step_end, buy_step.date_step_beg
    ) > city.days_delivery, 
    (
      datediff(
        buy_step.date_step_end, buy_step.date_step_beg
      ) - city.days_delivery
    ), 
    0
  ) as Late_days
from 
  buy_step 
  inner join step using(step_id) 
  inner join buy using(buy_id) 
  inner join client using(client_id) 
  inner join city using(city_id) 
where 
  step.name_step like 'Transportation' 
  and buy_step.date_step_end is not null 
order by 
  buy_step.buy_id

/* four inner joins and a condition */
select
  distinct name_client
from
  buy_book
  inner join buy using(buy_id)
  inner join client using(client_id)
  inner join book using(book_id)
  inner join author using(author_id)
where
  name_author like 'Dostoevsky'
order by 
  name_client

/* joins, groupping and a subquery */
select 
  name_genre, 
  sum(buy_book.amount) as books_amount 
from 
  genre 
  inner join book using(genre_id) 
  inner join buy_book using(book_id) 
group by 
  name_genre 
having 
  sum(buy_book.amount) = (
    select 
      max(ordered_amount) 
    from 
      (
        select 
          sum(buy_book.amount) as ordered_amount 
        from 
          genre 
          join book using(genre_id) 
          join buy_book using(book_id) 
        group by 
          name_genre
      ) query_1
  ) 
order by 
  books_amount desc

/* joins, groupping, a subquery and UNION ALL opeartor */
select 
  year(date_payment) as Year, 
  monthname(date_payment) as Month, 
  sum(price * amount) as Sum 
from 
  buy_archive 
group by 
  year(date_payment), 
  monthname(date_payment) 
union all 
select 
  year(date_step_end) as Year, 
  monthname(date_step_end) as Month, 
  sum(buy_book.amount * book.price) as Sum 
from 
  buy_step 
  join buy using(buy_id) 
  join buy_book using(buy_id) 
  join book using(book_id) 
where 
  date_step_end is not null 
  and step_id in (
    select 
      step_id 
    from 
      step 
    where 
      name_step like 'Payment'
  ) 
group by 
  year(date_step_end), 
  monthname(date_step_end) 
order by 
  Month, 
  Year

/* joins, groupping, a subquery and UNION ALL opeartor */
select 
  query_1.title, 
  sum(query_1.Amount) as Amount, 
  sum(query_1.Sum) as Sum 
from 
  (
    select 
      title, 
      sum(buy_book.amount) as Amount, 
      sum(buy_book.amount * price) as Sum 
    from 
      book 
      join buy_book using(book_id) 
      join buy using(buy_id) 
      join buy_step using(buy_id) 
    where 
      date_step_end is not null 
      and step_id in (
        select 
          step_id 
        from 
          step 
        where 
          name_step like 'Payment'
      ) 
    group by 
      title 
    union all 
    select 
      title, 
      sum(buy_archive.amount) as Amount, 
      sum(buy_archive.price * buy_archive.amount) as Sum 
    from 
      buy_archive 
      join book using(book_id) 
    group by 
      title
  ) query_1 
group by 
  query_1.title 
order by 
  Sum desc

/* joins and a condition */
select
  name_student,
  date_attempt,
  result
from
  student
  join attempt on student.student_id = attempt.student_id
  join subject on subject.subject_id = attempt.subject_id
where
  name_subject like 'Databases'
order by
  result desc
  
/* a left join and groupping */
select
  name_subject,
  count(attempt_id) as Total_tries,
  round(avg(attempt.result), 2) as Avg
from 
  subject
  left join attempt on subject.subject_id = attempt.subject_id
group by
  name_subject
order by
  Avg desc

/* joins and a condition with a subquery */
select 
  name_student, 
  result 
from 
  attempt 
  join student on attempt.student_id = student.student_id 
where 
  result = (
    select 
      max(result) 
    from 
      attempt
  ) 
order by 
  name_student

/* joins, groupping and DATEDIFF() function */
select
  name_student,
  name_subject,
  datediff(max(date_attempt), min(date_attempt)) as Days_count
from
  attempt 
  join subject on attempt.subject_id = subject.subject_id
  join student on attempt.student_id = student.student_id
group by
  name_student,
  name_subject
having
  count(attempt_id) > 1
order by
  Days_count

/* left join and groupping */
select
  name_subject,
  count(distinct student_id) as Amount
from 
  subject
  left join attempt on attempt.subject_id = subject.subject_id
group by
  name_subject
order by
  Amount desc,
  name_subject
  
/* inner joins, IF() clause and a condition */
select
  name_question,
  name_answer,
  if(is_correct = 0, 'Wrong', 'Correct') as Result
from
  testing
  join question on testing.question_id = question.question_id
  join answer on testing.answer_id = answer.answer_id
where
  attempt_id = 7
  
/* inner joins, calculations and groupping */
select
  name_student,
  name_subject,
  date_attempt,
  round(sum(is_correct) / 3 * 100, 2) as Result
from
  attempt
  join subject on attempt.subject_id = subject.subject_id
  join student on attempt.student_id = student.student_id
  join testing on testing.attempt_id = attempt.attempt_id
  join answer on testing.answer_id = answer.answer_id
group by
  name_student,
  name_subject,
  date_attempt
order by
  name_student,
  date_attempt desc
  
/* inner joins, left join, calculations, CONCAT() function and groupping */
select
  name_subject,
  concat(substring(name_question, 1, 30),'...') as Question,
  count(testing.answer_id) as Total_answers,
  round(sum(is_correct) / count(testing.answer_id) * 100, 2)  as Successful_tries
from 
  subject
  join question on subject.subject_id = question.subject_id
  join testing on question.question_id = testing.question_id
  left join answer on testing.answer_id = answer.answer_id
group by
  name_subject,
  name_question
order by
  name_subject,
  Successful_tries desc,
  name_question
  
/* inner joins and a condition */
select
  name_enrollee
from
  enrollee
  join program_enrollee on enrollee.enrollee_id = program_enrollee.enrollee_id
  join program on program_enrollee.program_id = program.program_id
where
  name_program like 'Mechatronics and Robotics'
order by
  name_enrollee

/* inner joins and a condition */
select
  name_program
from
  program 
  join program_subject on program.program_id = program_subject.program_id
  join subject on program_subject.subject_id = subject.subject_id
where
  name_subject like 'Informatics'
order by
  name_program desc

/* inner join, calculations and groupping */
select
  name_subject,
  count(enrollee_id) as Amount,
  max(result) as Max,
  min(result) as Min,
  round(avg(result), 1) as Avg
from
  subject 
  join enrollee_subject on subject.subject_id = enrollee_subject.subject_id
group by
  name_subject
order by
  name_subject
  
/* inner join, groupping and a group condition */
select
  name_program
from 
  program 
  join program_subject on program.program_id = program_subject.program_id
group by
  name_program
having 
  min(min_result) >= 40
order by
  name_program


