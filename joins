/* a simple join from a Coursera course */
select 
  distinct artist.name, 
  genre.name 
from 
  artist 
  join album on artist.artist_id = album.artist_id 
  join track on album.album_id = track.album_id 
  join genre on track.genre_id = genre.genre_id 
where 
  artist.name = 'AC/DC'

/* a simple inner join from a Stepic course */
select 
  book.title, 
  genre.name_genre, 
  book.price 
from 
  book 
  inner join genre on book.genre_id = genre.genre_id 
where 
  book.amount > 8 
order by 
  book.price desc

/* a simple left join */
select 
  genre.name_genre 
from 
  genre 
  left join book on genre.genre_id = book.genre_id 
where 
  book.genre_id is null

/* a cross join and random date generator for 2020 (I know it can be done simplier, but it was the first thing I came up with) */
select 
  city.name_city, 
  author.name_author, 
  date_format(
    from_unixtime(
      rand() * (
        unix_timestamp('2020-12-31') - unix_timestamp('2020-01-01')
      ) + unix_timestamp('2020-01-01')
    ), 
    '%Y-%m-%d'
  ) as Date 
from 
  city 
  cross join author 
order by 
  city.name_city, 
  Date desc

/* multiple inner-joins */
select
  genre.name_genre,
  book.title,
  author.name_author
from
  genre
  inner join book on genre.genre_id = book.genre_id
  inner join author on author.author_id = book.author_id
where
  book.genre_id = 1
order by
  book.title

/* left join with grouping */
select 
  author.name_author, 
  sum(book.amount) as Amount 
from 
  author 
  left join book on author.author_id = book.author_id 
group by 
  author.name_author 
having 
  sum(book.amount) < 10 
  or count(book.title) = 0 
order by 
  Amount

/* inner joins with subquery */
select 
  book.title, 
  author.name_author, 
  genre.name_genre, 
  book.price, 
  book.amount 
from 
  book 
  inner join author on author.author_id = book.author_id 
  inner join genre on genre.genre_id = book.genre_id 
where 
  book.genre_id in (
    select 
      query_all_genres.genre_id 
    from 
      (
        select 
          genre_id, 
          sum(amount) as genre_amount 
        from 
          book 
        group by 
          genre_id
      ) query_all_genres 
      inner join (
        select 
          genre_id, 
          sum(amount) as max_amount 
        from 
          book 
        group by 
          genre_id 
        limit 
          1
      ) query_max_amount on query_all_genres.genre_amount = query_max_amount.max_amount
  ) 
order by 
  book.title
