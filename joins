/* a simple join from a Coursera course */
SELECT DISTINCT artist.NAME,
                genre.NAME
FROM   artist
       JOIN album
         ON artist.artist_id = album.artist_id
       JOIN track
         ON album.album_id = track.album_id
       JOIN genre
         ON track.genre_id = genre.genre_id
WHERE  artist.NAME = 'AC/DC' 

/* a simple inner join from a Stepic course */
SELECT book.title,
       genre.name_genre,
       book.price
FROM   book
       INNER JOIN genre
               ON book.genre_id = genre.genre_id
WHERE  book.amount > 8
ORDER  BY book.price DESC 

/* a simple left join */
SELECT genre.name_genre
FROM   genre
       LEFT JOIN book
              ON genre.genre_id = book.genre_id
WHERE  book.genre_id IS NULL 

/* a cross join and random date generator for 2020 (I know it can be done simplier, but it was the first thing I came up with) */
SELECT city.name_city,
       author.name_author,
       Date_format(From_unixtime(Rand() * ( Unix_timestamp('2020-12-31') - Unix_timestamp('2020-01-01') ) + Unix_timestamp('2020-01-01')), '%Y-%m-%d') AS Date
FROM   city
       CROSS JOIN author
ORDER  BY city.name_city,
          date DESC 

/* multiple inner-joins */
SELECT genre.name_genre,
       book.title,
       author.name_author
FROM   genre
       INNER JOIN book
               ON genre.genre_id = book.genre_id
       INNER JOIN author
               ON author.author_id = book.author_id
WHERE  book.genre_id = 1
ORDER  BY book.title 

/* left join with grouping */
SELECT author.name_author,
       Sum(book.amount) AS Amount
FROM   author
       LEFT JOIN book
              ON author.author_id = book.author_id
GROUP  BY author.name_author
HAVING Sum(book.amount) < 10
        OR Count(book.title) = 0
ORDER  BY amount 

/* inner joins with subquery */
SELECT book.title,
       author.name_author,
       genre.name_genre,
       book.price,
       book.amount
FROM   book
       INNER JOIN author
               ON author.author_id = book.author_id
       INNER JOIN genre
               ON genre.genre_id = book.genre_id
WHERE  book.genre_id IN (SELECT query_all_genres.genre_id
                         FROM   (SELECT genre_id,
                                        Sum(amount) AS genre_amount
                                 FROM   book
                                 GROUP  BY genre_id) query_all_genres
                                INNER JOIN (SELECT genre_id,
                                                   Sum(amount) AS max_amount
                                            FROM   book
                                            GROUP  BY genre_id
                                            LIMIT  1) query_max_amount
                                        ON query_all_genres.genre_amount =
                                           query_max_amount.max_amount)
ORDER  BY book.title 

/* an example of combined use of ON and USING clause */
SELECT supply.title                    AS title,
       supply.author                   AS author,
       ( supply.amount + book.amount ) AS total_amount
FROM   supply
       INNER JOIN book using(price)
       INNER JOIN author
               ON book.author_id = author.author_id 

/* an example of diffrent JOIN uses in one query */
SELECT author.name_author AS author,
       genre.name_genre   AS genre,
       Count(book.title)  AS number_of_books
FROM   author
       CROSS JOIN genre
       LEFT JOIN book
              ON book.author_id = author.author_id
                 AND book.genre_id = genre.genre_id
GROUP  BY author,
          genre
ORDER  BY author,
          genre,
          number_of_books 

/* three inner joins */
SELECT buy_id,
       book.title,
       book.price,
       buy_book.amount
FROM   buy
       INNER JOIN buy_book using(buy_id)
       INNER JOIN book using(book_id)
       INNER JOIN client using(client_id)
WHERE  client.name_client LIKE 'Baranov Pavel'
ORDER  BY buy_id,
          book.title 

/* inner join, left join and COUNT() function */
SELECT author.name_author,
       title,
       Count(buy_book.book_id) AS Amount
FROM   book
       INNER JOIN author using(author_id)
       LEFT JOIN buy_book using(book_id)
GROUP  BY title,
          author.name_author
ORDER  BY author.name_author,
          title 

/* several inner joins and COUNT() function */
SELECT name_city,
       Count(name_city) AS Amount
FROM   city
       INNER JOIN client using(city_id)
       INNER JOIN buy using(client_id)
GROUP  BY name_city 

/* an inner join with several conditions */
SELECT buy_id,
       date_step_end
FROM   buy_step
       INNER JOIN step using(step_id)
WHERE  date_step_end IS NOT NULL
       AND name_step LIKE 'Payment' 

/* three inner joins, SUM() function and groupping */
SELECT buy_book.buy_id,
       client.name_client,
       Sum(buy_book.amount * book.price) AS Cost
FROM   buy_book
       INNER JOIN book using(book_id)
       INNER JOIN buy using(buy_id)
       INNER JOIN client using(client_id)
GROUP  BY buy_book.buy_id,
          client.name_client
ORDER  BY buy_book.buy_id 

/* an inner join and several conditions */
SELECT buy_id,
       name_step
FROM   buy_step
       INNER JOIN step using(step_id)
WHERE  date_step_beg IS NOT NULL
       AND date_step_end IS NULL
ORDER  BY buy_id 

/* four inner joins, several conditions and DATEDIFF() function */
SELECT buy_step.buy_id,
       Datediff(buy_step.date_step_end, buy_step.date_step_beg) AS Delivery_days,
       IF(Datediff(buy_step.date_step_end, buy_step.date_step_beg) > city.days_delivery,
       ( Datediff(buy_step.date_step_end, buy_step.date_step_beg) - city.days_delivery), 0) AS Late_days
FROM   buy_step
       inner join step USING(step_id)
       inner join buy USING(buy_id)
       inner join client USING(client_id)
       inner join city USING(city_id)
WHERE  step.name_step LIKE 'Transportation'
       AND buy_step.date_step_end IS NOT NULL
ORDER  BY buy_step.buy_id 

/* four inner joins and a condition */
SELECT DISTINCT name_client
FROM   buy_book
       INNER JOIN buy using(buy_id)
       INNER JOIN client using(client_id)
       INNER JOIN book using(book_id)
       INNER JOIN author using(author_id)
WHERE  name_author LIKE 'Dostoevsky'
ORDER  BY name_client 

/* joins, groupping and a subquery */
SELECT name_genre,
       Sum(buy_book.amount) AS books_amount
FROM   genre
       INNER JOIN book using(genre_id)
       INNER JOIN buy_book using(book_id)
GROUP  BY name_genre
HAVING Sum(buy_book.amount) = (SELECT Max(ordered_amount)
                               FROM   (SELECT Sum(buy_book.amount) AS ordered_amount
                                       FROM   genre
                                              JOIN book using(genre_id)
                                              JOIN buy_book using(book_id)
                                       GROUP  BY name_genre) query_1)
ORDER  BY books_amount DESC 

/* joins, groupping, a subquery and UNION ALL opeartor */
SELECT Year(date_payment)      AS Year,
       Monthname(date_payment) AS Month,
       Sum(price * amount)     AS Sum
FROM   buy_archive
GROUP  BY Year(date_payment),
          Monthname(date_payment)
UNION ALL
SELECT Year(date_step_end)               AS Year,
       Monthname(date_step_end)          AS Month,
       Sum(buy_book.amount * book.price) AS Sum
FROM   buy_step
       JOIN buy using(buy_id)
       JOIN buy_book using(buy_id)
       JOIN book using(book_id)
WHERE  date_step_end IS NOT NULL
       AND step_id IN (SELECT step_id
                       FROM   step
                       WHERE  name_step LIKE 'Payment')
GROUP  BY Year(date_step_end),
          Monthname(date_step_end)
ORDER  BY month,
          year 

/* joins, groupping, a subquery and UNION ALL opeartor */
SELECT query_1.title,
       Sum(query_1.amount) AS Amount,
       Sum(query_1.sum)    AS Sum
FROM   (SELECT title,
               Sum(buy_book.amount)         AS Amount,
               Sum(buy_book.amount * price) AS Sum
        FROM   book
               JOIN buy_book using(book_id)
               JOIN buy using(buy_id)
               JOIN buy_step using(buy_id)
        WHERE  date_step_end IS NOT NULL
               AND step_id IN (SELECT step_id
                               FROM   step
                               WHERE  name_step LIKE 'Payment')
        GROUP  BY title
        UNION ALL
        SELECT title,
               Sum(buy_archive.amount)                     AS Amount,
               Sum(buy_archive.price * buy_archive.amount) AS Sum
        FROM   buy_archive
               JOIN book using(book_id)
        GROUP  BY title) query_1
GROUP  BY query_1.title
ORDER  BY sum DESC 

/* joins and a condition */
SELECT name_student,
       date_attempt,
       result
FROM   student
       JOIN attempt
         ON student.student_id = attempt.student_id
       JOIN subject
         ON subject.subject_id = attempt.subject_id
WHERE  name_subject LIKE 'Databases'
ORDER  BY result DESC 
  
/* a left join and groupping */
SELECT name_subject,
       Count(attempt_id)             AS Total_tries,
       Round(Avg(attempt.result), 2) AS Avg
FROM   subject
       LEFT JOIN attempt
              ON subject.subject_id = attempt.subject_id
GROUP  BY name_subject
ORDER  BY avg DESC 

/* joins and a condition with a subquery */
SELECT name_student,
       result
FROM   attempt
       JOIN student
         ON attempt.student_id = student.student_id
WHERE  result = (SELECT Max(result)
                 FROM   attempt)
ORDER  BY name_student 

/* joins, groupping and DATEDIFF() function */
SELECT name_student,
       name_subject, Datediff(Max(date_attempt), Min(date_attempt)) AS
days_count
FROM   attempt
       JOIN subject
         ON attempt.subject_id = subject.subject_id
       JOIN student
         ON attempt.student_id = student.student_id

GROUP BY name_student, name_subject
HAVING Count(attempt_id) > 1 ORDER  BY days_count 

/* left join and groupping */
SELECT name_subject,
       Count(DISTINCT student_id) AS Amount
FROM   subject
       LEFT JOIN attempt
              ON attempt.subject_id = subject.subject_id
GROUP  BY name_subject
ORDER  BY amount DESC,
          name_subject 
  
/* inner joins, IF() clause and a condition */
SELECT name_question,
       name_answer,
       IF(is_correct = 0, 'Wrong', 'Correct') AS Result
FROM   testing
       join question
         ON testing.question_id = question.question_id
       join answer
         ON testing.answer_id = answer.answer_id
WHERE  attempt_id = 7 
  
/* inner joins, calculations and groupping */
SELECT name_student,
       name_subject,
       date_attempt,
       Round(Sum(is_correct) / 3 * 100, 2) AS Result
FROM   attempt
       JOIN subject
         ON attempt.subject_id = subject.subject_id
       JOIN student
         ON attempt.student_id = student.student_id
       JOIN testing
         ON testing.attempt_id = attempt.attempt_id
       JOIN answer
         ON testing.answer_id = answer.answer_id
GROUP  BY name_student,
          name_subject,
          date_attempt
ORDER  BY name_student,
          date_attempt DESC 
  
/* inner joins, left join, calculations, CONCAT() function and groupping */
SELECT name_subject,
       Concat(Substring(name_question, 1, 30), '...')             AS Question,
       Count(testing.answer_id)                                   AS
       Total_answers,
       Round(Sum(is_correct) / Count(testing.answer_id) * 100, 2) AS
       Successful_tries
FROM   subject
       JOIN question
         ON subject.subject_id = question.subject_id
       JOIN testing
         ON question.question_id = testing.question_id
       LEFT JOIN answer
              ON testing.answer_id = answer.answer_id
GROUP  BY name_subject,
          name_question
ORDER  BY name_subject,
          successful_tries DESC,
          name_question 
  
/* inner joins and a condition */
SELECT name_enrollee
FROM   enrollee
       JOIN program_enrollee
         ON enrollee.enrollee_id = program_enrollee.enrollee_id
       JOIN program
         ON program_enrollee.program_id = program.program_id
WHERE  name_program LIKE 'Mechatronics and Robotics'
ORDER  BY name_enrollee 

/* inner joins and a condition */
SELECT name_program
FROM   program
       JOIN program_subject
         ON program.program_id = program_subject.program_id
       JOIN subject
         ON program_subject.subject_id = subject.subject_id
WHERE  name_subject LIKE 'Informatics'
ORDER  BY name_program DESC 

/* inner join, calculations and groupping */
SELECT name_subject,
       Count(enrollee_id)    AS Amount,
       Max(result)           AS Max,
       Min(result)           AS Min,
       Round(Avg(result), 1) AS Avg
FROM   subject
       JOIN enrollee_subject
         ON subject.subject_id = enrollee_subject.subject_id
GROUP  BY name_subject
ORDER  BY name_subject 
  
/* inner join, groupping and a group condition */
SELECT name_program
FROM   program
       JOIN program_subject
         ON program.program_id = program_subject.program_id
GROUP  BY name_program
HAVING Min(min_result) >= 40
ORDER  BY name_program 

/* left joins, groupping and IF() function */
SELECT name_enrollee,
       IF(SUM(bonus) IS NULL, 0, SUM(bonus)) AS Bonus
FROM   enrollee
       left join enrollee_achievement
              ON enrollee.enrollee_id = enrollee_achievement.enrollee_id
       left join achievement
              ON enrollee_achievement.achievement_id =
                 achievement.achievement_id
GROUP  BY name_enrollee
ORDER  BY name_enrollee 

/* inner joins, groupping and math functions */
SELECT name_department,
       name_program,
       PLAN,
       Count(enrollee_id)                      AS Amount,
       Round(( Count(enrollee_id) / PLAN ), 2) AS Person_per_place
FROM   department
       JOIN program
         ON department.department_id = program.department_id
       JOIN program_enrollee
         ON program.program_id = program_enrollee.program_id
GROUP  BY name_department,
          name_program,
          PLAN
ORDER  BY person_per_place DESC 

/* inner joins, groupping, conditions and math functions */
SELECT name_program
FROM   program
       JOIN program_subject
         ON program.program_id = program_subject.program_id
       JOIN subject
         ON program_subject.subject_id = subject.subject_id
WHERE  name_subject IN ( 'Informatics', 'Mathematics' )
GROUP  BY name_program
HAVING Count(DISTINCT name_subject) = 2
ORDER  BY name_program 

/* multiple inner joins, groupping and calculations */
SELECT name_program,
       name_enrollee,
       Sum(result) AS Summary
FROM   enrollee
       JOIN program_enrollee
         ON enrollee.enrollee_id = program_enrollee.enrollee_id
       JOIN program
         ON program_enrollee.program_id = program.program_id
       JOIN program_subject
         ON program.program_id = program_subject.program_id
       JOIN subject
         ON program_subject.subject_id = subject.subject_id
       JOIN enrollee_subject
         ON subject.subject_id = enrollee_subject.subject_id
            AND enrollee_subject.enrollee_id = enrollee.enrollee_id
GROUP  BY name_program,
          name_enrollee
ORDER  BY name_program,
          summary DESC 

/* multiple inner joins, groupping and a condition */
SELECT name_program,
       name_enrollee
FROM   program_enrollee
       JOIN program
         ON program_enrollee.program_id = program.program_id
       JOIN enrollee
         ON program_enrollee.enrollee_id = enrollee.enrollee_id
       JOIN program_subject
         ON program.program_id = program_subject.program_id
       JOIN enrollee_subject
         ON enrollee.enrollee_id = enrollee_subject.enrollee_id
            AND program_subject.subject_id = enrollee_subject.subject_id
WHERE  result < min_result
GROUP  BY name_program,
          name_enrollee
ORDER  BY name_program,
          name_enrollee 

/* inner join, groupping and DATEADD() function */
SELECT customers.customer_name,
       Count(orders.order_id) AS order_count
FROM   customers
       JOIN orders
         ON customers.customer_id = orders.customer_id
WHERE  customers.country = 'USA'
       AND orders.order_date >= (SELECT Dateadd(year, -1, Getdate()))
-- subquery to retrieve orders within the last year
GROUP  BY customers.customer_name
ORDER  BY order_count DESC 

/* work with strings */
SELECT Concat(LEFT(Concat(m.module_id, ' ', module_name), 16), '...') AS Module,
       Concat(LEFT(Concat(l.module_id, '.', lesson_position, ' ', lesson_name), 16), '...') AS Lesson,
       Concat(l.module_id, '.', lesson_position, '.', step_position, ' ', step_name) AS Step
FROM   module AS m
       JOIN lesson AS l
         ON m.module_id = l.module_id
       JOIN step AS s
         ON l.lesson_id = s.lesson_id
WHERE  step_name LIKE '%ложенн% %апрос%'
ORDER  BY Module,
          Lesson,
          Step 

/*  */
