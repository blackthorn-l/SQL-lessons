/* creating a table */
create table book(
  book_id INT PRIMARY KEY AUTO_INCREMENT, 
  title VARCHAR(50), 
  author VARCHAR(30), 
  price DECIMAL(8, 2), 
  amount INT
)

/* another example of creating a table */
create table supply(
  supply_id INT PRIMARY KEY AUTO_INCREMENT, 
  title VARCHAR(50), 
  author VARCHAR(30), 
  price DECIMAL(8, 2), 
  amount INT
)

/* and another example of creating a table */
create table fine(
	fine_id INT PRIMARY KEY AUTO_INCREMENT,
	name VARCHAR(30),
	number_plate VARCHAR(6),
	violation VARCHAR(50),
	sum_fine DECIMAL(8, 2),
	date_violation DATE,
	date_payment DATE
)

/* adding values to the table */
insert into book (title, author, price, amount) 
values 
  (
    "Мастер и Маргарита", 
    "Булгаков М.А.", 670.99, 
    3
  )
  
/* adding several rows to the table */
insert into book (title, author, price, amount) 
values 
  (
    "Белая гвардия", "Булгаков М.А.", 
    540.50, 5
  );
insert into book (title, author, price, amount) 
values 
  (
    "Идиот", "Достоевский Ф.М.", 
    460.00, 10
  );
insert into book (title, author, price, amount) 
values 
  (
    "Братья Карамазовы", 
    "Достоевский Ф.М.", 
    799.01, 2
  );
  
/* another example of adding several rows to the table */
insert into supply (title, author, price, amount) 
values 
  (
    'Лирика', 'Пастернак Б.Л.', 
    518.99, 2
  ), 
  (
    'Черный человек', 'Есенин С.А.', 
    570.20, 6
  ), 
  (
    'Белая гвардия', 'Булгаков М.А.', 
    540.50, 7
  ), 
  (
    'Идиот', 'Достоевский Ф.М.', 
    360.80, 3
  )

/* and another example of adding several rows to the table */
insert into fine (
  name, number_plate, violation, sum_fine, 
  date_violation, date_payment
) 
values 
  (
    'Баранов П.Е.', 'Р523ВТ', 
    'Превышение скорости(от 40 до 60)', 
    null, '2020-02-14', null
  ), 
  (
    'Абрамова К.А.', 'О111АВ', 
    'Проезд на запрещающий сигнал', 
    null, '2020-02-23', null
  ), 
  (
    'Яковлев Г.Р.', 'Т330ТТ', 
    'Проезд на запрещающий сигнал', 
    null, '2020-03-03', null
  )

/* adding several rows to the table from another table with a condition */
insert into book (title, author, price, amount) 
select 
  title, 
  author, 
  price, 
  amount 
from 
  supply 
where 
  author not in (
    'Булгаков М.А.', 'Достоевский Ф.М.'
  );

/* adding several rows to the table from another table with a condition using subquery */
insert into book (title, author, price, amount) 
select 
  title, 
  author, 
  price, 
  amount 
from 
  supply 
where 
  author not in (
    select 
      author 
    from 
      book
  )

/* an example of updating a value based on specific conditions */
update 
  book 
set 
  price = price * 0.9 
where 
  amount between 5 
  and 10
  
/* an example of updating several values */
update 
  book 
set 
  price = if(buy = 0, price * 0.9, price), 
  buy = if(buy > amount, amount, buy)
  
/* another example of updating several values based on specific conditions */
update 
  book, 
  supply 
set 
  book.amount = book.amount + supply.amount, 
  book.price = (book.price + supply.price) / 2 
where 
  book.title like supply.title

/* and another example of updating several values based on specific conditions */
update 
  fine as f, 
  payment as p 
set 
  f.date_payment = p.date_payment, 
  f.sum_fine = if(
    (
      p.date_payment - p.date_violation <= 20
    ), 
    (f.sum_fine / 2), 
    f.sum_fine
  ) 
where 
  p.name = f.name 
  and p.number_plate = f.number_plate 
  and p.violation = f.violation 
  and p.date_violation = f.date_violation

/* an example of updating several values based on specific conditions and using aliases */
update 
  fine 
set 
  sum_fine = (
    if(
      sum_fine is null, 
      (
        select 
          sum_fine 
        from 
          traffic_violation as trv 
        where 
          trv.violation = fine.violation
      ), 
      sum_fine
    )
  )
  
/* deleting values based on specific conditions */
delete from 
  supply 
where 
  author in (
    select 
      author 
    from 
      book 
    group by 
      author 
    having 
      sum(amount) > 10
  )
  
/* creating a table based on information from another table */
create table ordering as 
select 
  author, 
  title, 
  (
    select 
      floor(
        avg(amount)
      ) 
    from 
      book
  ) as amount 
from 
  book 
where 
  amount < (
    select 
      floor(
        avg(amount)
      ) 
    from 
      book
  )
