/* creating the simplest table */
create table author(
  author_id int primary key auto_increment, 
  name_author varchar(50)
)

/* creating a table */
create table book(
  book_id int primary key auto_increment, 
  title varchar(50), 
  author varchar(30), 
  price decimal(8, 2), 
  amount int
)

/* another example of creating a table */
create table supply(
  supply_id int primary key auto_increment, 
  title varchar(50), 
  author varchar(30), 
  price decimal(8, 2), 
  amount int
)

/* and another example of creating a table */
create table fine(
  fine_id int primary key auto_increment, 
  name varchar(30), 
  number_plate varchar(6), 
  violation varchar(50), 
  sum_fine decimal(8, 2), 
  date_violation date, 
  date_payment date
)

/* creating a table with foreign keys */
create table book (
  book_id int primary key auto_increment, 
  title varchar(50), 
  author_id int not null, 
  genre_id int, 
  price decimal(8, 2), 
  amount int, 
  foreign key (author_id) references author (author_id), 
  foreign key (genre_id) references genre (genre_id)
)

/* creating a table with foreign keys with delete instructions */
create table book (
  book_id int primary key auto_increment, 
  title varchar(50), 
  author_id int not null, 
  genre_id int, 
  price decimal(8, 2), 
  amount int, 
  foreign key (author_id) references author (author_id) on delete cascade, 
  foreign key (genre_id) references genre (genre_id) on delete set null
)

/* creating a table based on information from another table */
create table ordering as 
select 
  author, 
  title, 
  (
    select 
      floor(
        avg(amount)
      ) 
    from 
      book
  ) as amount 
from 
  book 
where 
  amount < (
    select 
      floor(
        avg(amount)
      ) 
    from 
      book
  )

/* another example of creating a table based on information from another table */
create table back_payment as 
select 
  name, 
  number_plate, 
  violation, 
  sum_fine, 
  date_violation 
from 
  fine 
where 
  date_payment is null

/* adding values to the table */
insert into book (title, author, price, amount) 
values 
  (
    "The Master and Margarita", "M. Bulgakov", 670.99, 3
  )
  
/* adding several rows to the table */
insert into book (title, author, price, amount) 
values 
  (
    "White Guard", "M. Bulgakov", 540.50, 5
  );
insert into book (title, author, price, amount) 
values 
  (
    "The Idiot", "F. Dostoevsky", 460.00, 10
  );
insert into book (title, author, price, amount) 
values 
  (
    "The Brothers Karamazov", "F. Dostoevsky", 799.01, 2
  );
  
/* another example of adding several rows to the table */
insert into supply (title, author, price, amount) 
values 
  (
    'Poems', 'B. Pasternak', 518.99, 2
  ), 
  (
    'A Dark Man', 'S. Yesenin', 570.20, 6
  ), 
  (
    'White Guard', 'M. Bulgakov', 540.50, 7
  ), 
  (
    'The Idiot', 'F. Dostoevsky', 360.80, 3
  )

/* and another example of adding several rows to the table */
insert into fine (name, number_plate, violation, sum_fine, date_violation, date_payment) 
values 
  (
    'P. Baranov', 'Р523ВТ', 'Exceeding speed limits (from 40 to 60)', null, '2020-02-14', null
  ), 
  (
    'K. Abramova', 'О111АВ', 'Driving on a prohibition signal', null, '2020-02-23', null
  ), 
  (
    'G. Yakovlev', 'Т330ТТ', 'Driving on a prohibition signal', null, '2020-03-03', null
  )

/* the simplest example of adding several rows to the table */
insert into author (name_author) 
values 
  (
    'M. Bulgakov',
  ),
  (
    'F. Dostoevsky'
  ), 
  (
    'S. Yesenin'
  ), 
  (
    'B. Pasternak'
  )

/* adding several rows to the table from another table with a condition */
insert into book (title, author, price, amount) 
select 
  title, 
  author, 
  price, 
  amount 
from 
  supply 
where 
  author not in (
    'M. Bulgakov', 'F. Dostoevsky'
  )

/* adding several rows to the table from another table with a condition using subquery */
insert into book (title, author, price, amount) 
select 
  title, 
  author, 
  price, 
  amount 
from 
  supply 
where 
  author not in (
    select 
      author 
    from 
      book
  )

/* adding several rows to the table that contains foreign keys */
insert into book (title, author_id, genre_id, price, amount) 
values 
  (
    'Poems and poesy', 3, 2, 650.00, 15
  ), 
  (
    'A Dark Man', 3, 2, 570.20, 6
  ), 
  (
    'Poems', 4, 2, 518.99, 2
  )

/* an example of updating a value based on specific conditions */
update 
  book 
set 
  price = price * 0.9 
where 
  amount between 5 
  and 10
  
/* an example of updating several values */
update 
  book 
set 
  price = if(buy = 0, price * 0.9, price), 
  buy = if(buy > amount, amount, buy)
  
/* another example of updating several values based on specific conditions */
update 
  book, 
  supply 
set 
  book.amount = book.amount + supply.amount, 
  book.price = (book.price + supply.price) / 2 
where 
  book.title like supply.title

/* and another example of updating several values based on specific conditions */
update 
  fine as f, 
  payment as p 
set 
  f.date_payment = p.date_payment, 
  f.sum_fine = if(
    (
      p.date_payment - p.date_violation <= 20
    ), 
    (f.sum_fine / 2), 
    f.sum_fine
  ) 
where 
  p.name = f.name 
  and p.number_plate = f.number_plate 
  and p.violation = f.violation 
  and p.date_violation = f.date_violation

/* an example of updating several values based on specific conditions and using aliases */
update 
  fine 
set 
  sum_fine = (
    if(
      sum_fine is null, 
      (
        select 
          sum_fine 
        from 
          traffic_violation as trv 
        where 
          trv.violation = fine.violation
      ), 
      sum_fine
    )
  )
  
/* deleting values based on specific conditions */
delete from 
  supply 
where 
  author in (
    select 
      author 
    from 
      book 
    group by 
      author 
    having 
      sum(amount) > 10
  )

/* another example of deleting values based on specific conditions */
delete from 
  fine 
where 
  date_violation < '2020-02-01';
select 
  * 
from 
  fine

/* Coursera's course assignment on creating a database, filling in data */
/* the first step on creating database and setting tables */
create database roster;
drop 
  table if exists Member;
drop 
  table if exists `User`;
drop 
  table if exists Course;
create table `User` (
  user_id integer not null auto_increment, 
  name varchar(128) unique, 
  primary key(user_id)
) engine = InnoDB character set = utf8;
create table Course (
  course_id integer not null auto_increment, 
  title varchar(128) unique, 
  primary key(course_id)
) engine = InnoDB character set = utf8;
create table Member (
  user_id integer, 
  course_id integer, 
  role integer, 
  constraint foreign key (user_id) references `User` (user_id) on delete cascade on update cascade, 
  constraint foreign key (course_id) references Course (course_id) on delete cascade on update cascade, 
  primary key (user_id, course_id)
) engine = InnoDB character set = utf8;

/* the second step on filling data */
insert into user (name) 
values 
  ('Lmar'), 
  ('Callum'), 
  ('Kaidan'), 
  ('Luca'), 
  ('Samanthalee'), 
  ('Khayla'), 
  ('Alanis'), 
  ('Katelin'), 
  ('Tadd'), 
  ('Tiarn'), 
  ('Nathalie'), 
  ('Elan'), 
  ('Koby'), 
  ('Martine'), 
  ('Sorche'); 
insert into course (title) 
values 
  ('si106'), 
  ('si110'), 
  ('si206'); 
insert into member (user_id, course_id, role) 
values 
  (1, 1, 1), 
  (2, 1, 0), 
  (3, 1, 0), 
  (4, 1, 0), 
  (5, 1, 0), 
  (6, 2, 1), 
  (7, 2, 0), 
  (8, 2, 0), 
  (9, 2, 0), 
  (10, 2, 0), 
  (11, 3, 1), 
  (12, 3, 0), 
  (13, 3, 0), 
  (14, 3, 0), 
  (15, 3, 0)
  
/* the third step on checking data (should be in queries section though) */
select 
  User.name, 
  Course.title, 
  Member.role 
from 
  User 
  join Member 
  join Course on User.user_id = Member.user_id 
  and Member.course_id = Course.course_id 
order by 
  Course.title, 
  Member.role desc, 
  User.name

/* updating several rows in 2 tables */
update
  book
  inner join author using(author_id)
  inner join supply on book.title = supply.title
  and supply.author = author.name_author
set 
  book.amount = book.amount + supply.amount,
  book.price = (book.price * book.amount + supply.price * supply.amount) / (book.amount + supply.amount),
  supply.amount = 0
where
  book.price <> supply.price

/* adding values based on joining two tables */
insert into author (name_author) 
select 
  supply.author 
from 
  author 
  right join supply on author.name_author = supply.author 
where 
  name_author is null

/* adding several values based on joining two tables */
insert into book (title, author_id, price, amount) 
select 
  title, 
  author.author_id, 
  price, 
  amount 
from 
  supply 
  inner join author on supply.author = author.name_author 
where 
  amount <> 0

/* two queries to update two rows */
update 
  book 
set 
  genre_id = (
    select 
      genre_id 
    from 
      genre 
    where 
      name_genre = 'Poetry'
  ) 
where 
  book_id = 10;
  
update 
  book 
set 
  genre_id = (
    select 
      genre_id 
    from 
      genre 
    where 
      name_genre = 'Adventure'
  ) 
where 
  book_id = 10;

/* deleting from a table with a use of subquery */
delete from 
  author 
where 
  author_id in (
    select 
      author_id 
    from 
      book 
    group by 
      author_id 
    having 
      sum(amount) < 20
  )

/* another example of deleting from a table with a use of subquery */
delete from 
  genre 
where 
  genre_id in (
    select 
      genre_id 
    from 
      book 
    group by 
      genre_id 
    having 
      count(*) < 4
  )

/* deleting from a joined table with a use of subquery */
delete from 
  author using author 
  inner join book using(author_id) 
where 
  genre_id in (
    select 
      genre_id 
    from 
      genre 
    where 
      name_genre like 'Poetry'
  )

/* inserting a value without VALUES keyword */
insert into client (name_client, city_id, email) 
select 
  'Попов Илья', 
  city_id, 
  'popov@test' 
from 
  city 
where 
  name_city like 'Москва'

/* inserting a value without VALUES keyword */
insert into buy (buy_description, client_id)
select
  'Contact me',
  client_id
from
  client
where
  name_client like 'Popov Ilya'

/* inserting two values with SELECT statement */
insert into buy_book (buy_id, book_id, amount)
select
  5,
  book_id,
  2
from 
  book 
where
  title like 'Lyrics';
insert into buy_book (buy_id, book_id, amount)
select
  5,
  book_id,
  1
from 
  book 
where
  title like 'The White Guard';

/* updating a value with JOIN clause and a condition */
update book
  join buy_book using(book_id)
set 
  book.amount = book.amount - buy_book.amount
where
  buy_id = 5
  
/* creating a table with a select statement */
create table buy_pay as
select
  title,
  name_author,
  price,
  buy_book.amount,
  sum(buy_book.amount * price) as Sum
from 
  author
  join book using(author_id)
  join buy_book using(book_id)
where
  buy_id = 5
group by 
  title,
  name_author,
  price,
  buy_book.amount
order by 
  title

/* creating a table with a select statement and aggregate functions */
create table buy_pay as
select
  buy_id,
  sum(buy_book.amount) as Amount,
  sum(price * buy_book.amount) as Total
from
  buy_book
  join book using(book_id)
where
  buy_id = 5
group by
  buy_id

/* inserting values with the use of CROSS JOIN */
insert into buy_step (buy_id, step_id, date_step_beg, date_step_end)
select
  5,
  step_id,
  null,
  null
from 
  buy
  cross join step
where 
  buy_id = 5

/* two examples of updating a value in a table with and without the use of JOIN clause */
-- 1
update 
  buy_step 
set 
  date_step_beg = '2020-04-12' 
where 
  buy_id = 5 
  and step_id = (
    select 
      step_id 
    from 
      step 
    where 
      name_step like 'Payment'
  );

-- 2
update 
  buy_step 
  join step using(step_id) 
set 
  date_step_beg = '2020-04-12' 
where 
  buy_id = 5 
  and name_step like 'Payment';
  
/* inserting a value with the use of JOINs */
insert into
  attempt (student_id, subject_id, date_attempt)
select
  attempt.student_id,
  attempt.subject_id,
  now()
from
  attempt
  join student on attempt.student_id = student.student_id
  join subject on attempt.subject_id = subject.subject_id
where
  name_student like 'Pavel Baranov'
  and name_subject like 'Databases'
  
/* two examples of inserting values in a table with and without the use of JOIN clause */
-- 1
insert into testing (attempt_id, question_id) 
select 
  (
    select 
      max(attempt_id) 
    from 
      attempt
  ), 
  question_id 
from 
  question 
where 
  subject_id = (
    select 
      subject_id 
    from 
      attempt 
    where 
      attempt_id = (
        select 
          max(attempt_id) 
        from 
          attempt
      )
  ) 
order by 
  rand(question_id) 
limit 
  3

-- 2
insert into
  testing (attempt_id, question_id)
select
  attempt_id,
  question_id
from
  attempt
  join question on attempt.subject_id = question.subject_id 
where
  attempt_id = (
  	select 
      max(attempt_id)
    from 
      attempt
  	)
order by
  rand(question_id)
limit 
  3

/* updating a value, calcualtions  */
update 
  attempt 
set 
  result = (
    select 
      round(
        sum(is_correct) / 3 * 100
      ) 
    from 
      testing 
      join answer on testing.answer_id = answer.answer_id 
    where 
      attempt_id = 8
  ) 
where 
  attempt_id = 8

/* deleting values based on condition; cascade deleting  */
delete from 
  attempt 
where 
  date_attempt < '2020-05-01'

/*   */
