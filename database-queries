/* creating the simplest table */
CREATE TABLE author
  (
     author_id   INT PRIMARY KEY auto_increment,
     name_author VARCHAR(50)
  ) 

/* creating a table */
CREATE TABLE book
  (
     book_id INT PRIMARY KEY auto_increment,
     title   VARCHAR(50),
     author  VARCHAR(30),
     price   DECIMAL(8, 2),
     amount  INT
  ) 

/* another example of creating a table */
CREATE TABLE supply
  (
     supply_id INT PRIMARY KEY auto_increment,
     title     VARCHAR(50),
     author    VARCHAR(30),
     price     DECIMAL(8, 2),
     amount    INT
  ) 

/* and another example of creating a table */
CREATE TABLE fine
  (
     fine_id        INT PRIMARY KEY auto_increment,
     name           VARCHAR(30),
     number_plate   VARCHAR(6),
     violation      VARCHAR(50),
     sum_fine       DECIMAL(8, 2),
     date_violation DATE,
     date_payment   DATE
  ) 

/* creating a table with foreign keys */
CREATE TABLE book
  (
     book_id   INT PRIMARY KEY auto_increment,
     title     VARCHAR(50),
     author_id INT NOT NULL,
     genre_id  INT,
     price     DECIMAL(8, 2),
     amount    INT,
     FOREIGN KEY (author_id) REFERENCES author (author_id),
     FOREIGN KEY (genre_id) REFERENCES genre (genre_id)
  )

/* creating a table with foreign keys with delete instructions */
CREATE TABLE book
  (
     book_id   INT PRIMARY KEY auto_increment,
     title     VARCHAR(50),
     author_id INT NOT NULL,
     genre_id  INT,
     price     DECIMAL(8, 2),
     amount    INT,
     FOREIGN KEY (author_id) REFERENCES author (author_id) ON DELETE CASCADE,
     FOREIGN KEY (genre_id) REFERENCES genre (genre_id) ON DELETE SET NULL
  ) 

/* creating a table based on information from another table */
CREATE TABLE ordering AS
  SELECT author,
         title,
         (SELECT Floor(Avg(amount))
          FROM   book) AS amount
  FROM   book
  WHERE  amount < (SELECT Floor(Avg(amount))
                   FROM   book) 

/* another example of creating a table based on information from another table */
CREATE TABLE back_payment AS
  SELECT NAME,
         number_plate,
         violation,
         sum_fine,
         date_violation
  FROM   fine
  WHERE  date_payment IS NULL 

/* adding values to the table */
INSERT INTO book
            (title,
             author,
             price,
             amount)
VALUES     ("the master and margarita",
            "m. bulgakov",
            670.99,
            3) 
  
/* adding several rows to the table */
INSERT INTO book
            (title,
             author,
             price,
             amount)
VALUES      ( "white guard",
              "m. bulgakov",
              540.50,
              5 );

INSERT INTO book
            (title,
             author,
             price,
             amount)
VALUES      ( "the idiot",
              "f. dostoevsky",
              460.00,
              10 );

INSERT INTO book
            (title,
             author,
             price,
             amount)
VALUES      ( "the brothers karamazov",
              "f. dostoevsky",
              799.01,
              2 ); 
  
/* another example of adding several rows to the table */
INSERT INTO supply
            (title,
             author,
             price,
             amount)
VALUES      ( 'Poems',
              'B. Pasternak',
              518.99,
              2 ),
            ( 'A Dark Man',
              'S. Yesenin',
              570.20,
              6 ),
            ( 'White Guard',
              'M. Bulgakov',
              540.50,
              7 ),
            ( 'The Idiot',
              'F. Dostoevsky',
              360.80,
              3 ) 

/* and another example of adding several rows to the table */
INSERT INTO fine
            (NAME,
             number_plate,
             violation,
             sum_fine,
             date_violation,
             date_payment)
VALUES      ( 'P. Baranov',
              'Р523ВТ',
              'Exceeding speed limits (from 40 to 60)',
              NULL,
              '2020-02-14',
              NULL ),
            ( 'K. Abramova',
              'О111АВ',
              'Driving on a prohibition signal',
              NULL,
              '2020-02-23',
              NULL ),
            ( 'G. Yakovlev',
              'Т330ТТ',
              'Driving on a prohibition signal',
              NULL,
              '2020-03-03',
              NULL ) 

/* the simplest example of adding several rows to the table */
INSERT INTO author
            (name_author)
VALUES      ( 'M. Bulgakov', ),
            ( 'F. Dostoevsky' ),
            ( 'S. Yesenin' ),
            ( 'B. Pasternak' ) 

/* adding several rows to the table from another table with a condition */
INSERT INTO book
            (title,
             author,
             price,
             amount)
SELECT title,
       author,
       price,
       amount
FROM   supply
WHERE  author NOT IN ( 'M. Bulgakov', 'F. Dostoevsky' ) 

/* adding several rows to the table from another table with a condition using subquery */
INSERT INTO book
            (title,
             author,
             price,
             amount)
SELECT title,
       author,
       price,
       amount
FROM   supply
WHERE  author NOT IN (SELECT author
                      FROM   book) 

/* adding several rows to the table that contains foreign keys */
INSERT INTO book
            (title,
             author_id,
             genre_id,
             price,
             amount)
VALUES      ( 'Poems and poesy',
              3,
              2,
              650.00,
              15 ),
            ( 'A Dark Man',
              3,
              2,
              570.20,
              6 ),
            ( 'Poems',
              4,
              2,
              518.99,
              2 ) 

/* an example of updating a value based on specific conditions */
UPDATE book
SET    price = price * 0.9
WHERE  amount BETWEEN 5 AND 10 
  
/* an example of updating several values */
UPDATE book
SET    price = IF(buy = 0, price * 0.9, price),
       buy = IF(buy > amount, amount, buy) 
  
/* another example of updating several values based on specific conditions */
UPDATE book,
       supply
SET    book.amount = book.amount + supply.amount,
       book.price = ( book.price + supply.price ) / 2
WHERE  book.title LIKE supply.title 

/* and another example of updating several values based on specific conditions */
UPDATE fine AS f,
       payment AS p
SET    f.date_payment = p.date_payment,
       f.sum_fine = IF(( p.date_payment - p.date_violation <= 20 ), (
                    f.sum_fine / 2 ),
                    f.sum_fine)
WHERE  p.name = f.name
       AND p.number_plate = f.number_plate
       AND p.violation = f.violation
       AND p.date_violation = f.date_violation 

/* an example of updating several values based on specific conditions and using aliases */
UPDATE fine
SET    sum_fine = ( IF(sum_fine IS NULL, (SELECT sum_fine
                                          FROM   traffic_violation AS trv
                                          WHERE  trv.violation = fine.violation),
                           sum_fine) ) 
  
/* deleting values based on specific conditions */
DELETE FROM supply
WHERE  author IN (SELECT author
                  FROM   book
                  GROUP  BY author
                  HAVING Sum(amount) > 10) 

/* another example of deleting values based on specific conditions */
DELETE FROM fine
WHERE  date_violation < '2020-02-01';

SELECT *
FROM   fine 

/* Coursera's course assignment on creating a database, filling in data */
/* the first step on creating database and setting tables */
CREATE DATABASE roster;

DROP TABLE IF EXISTS member;

DROP TABLE IF EXISTS `user`;

DROP TABLE IF EXISTS course; 

CREATE TABLE `user`
  (
     user_id INTEGER NOT NULL auto_increment,
     name    VARCHAR(128) UNIQUE,
     PRIMARY KEY(user_id)
  )
engine = innodb
CHARACTER SET = utf8; 

CREATE TABLE course
  (
     course_id INTEGER NOT NULL auto_increment,
     title     VARCHAR(128) UNIQUE,
     PRIMARY KEY(course_id)
  )
engine = innodb
CHARACTER SET = utf8; 

CREATE TABLE member
             (
                          user_id   INTEGER,
                          course_id INTEGER,
                          role      INTEGER,
                          CONSTRAINT FOREIGN KEY (user_id) REFERENCES `USER` (user_id) ON
             DELETE CASCADE
             ON
             UPDATE CASCADE,
                    CONSTRAINT FOREIGN KEY (course_id) REFERENCES course (course_id)
             ON
             DELETE CASCADE
             ON
             UPDATE CASCADE,
                    PRIMARY KEY (user_id, course_id)
             )
             engine = innodb character
      SETSET = utf8;

/* the second step on filling data */
INSERT INTO USER
            (NAME)
VALUES      ('Lmar'),
            ('Callum'),
            ('Kaidan'),
            ('Luca'),
            ('Samanthalee'),
            ('Khayla'),
            ('Alanis'),
            ('Katelin'),
            ('Tadd'),
            ('Tiarn'),
            ('Nathalie'),
            ('Elan'),
            ('Koby'),
            ('Martine'),
            ('Sorche');

INSERT INTO course
            (title)
VALUES      ('si106'),
            ('si110'),
            ('si206');

INSERT INTO member
            (user_id,
             course_id,
             role)
VALUES      (1, 1, 1), 
            (2, 1, 0), 
            (3, 1, 0), 
            (4, 1, 0), 
            (5, 1, 0), 
            (6, 2, 1), 
            (7, 2, 0), 
            (8, 2, 0), 
            (9, 2, 0), 
            (10, 2, 0), 
            (11, 3, 1), 
            (12, 3, 0), 
            (13, 3, 0), 
            (14, 3, 0), 
            (15, 3, 0);
  
/* the third step on checking data (should be in queries section though) */
SELECT   USER.NAME,
         course.title,
         member.role
FROM     USER
JOIN     member
JOIN     course
ON       USER.user_id = member.user_id
AND      member.course_id = course.course_id
order BY course.title,
         member.role DESC,
         USER.NAME

/* updating several rows in 2 tables */
UPDATE book
       INNER JOIN author using(author_id)
       INNER JOIN supply
               ON book.title = supply.title
                  AND supply.author = author.name_author
SET    book.amount = book.amount + supply.amount,
       book.price = ( book.price * book.amount + supply.price * supply.amount )
                    / (
                    book.amount + supply.amount ),
       supply.amount = 0
WHERE  book.price <> supply.price 

/* adding values based on joining two tables */
INSERT INTO author
            (name_author)
SELECT supply.author
FROM   author
       RIGHT JOIN supply
               ON author.name_author = supply.author
WHERE  name_author IS NULL 

/* adding several values based on joining two tables */
INSERT INTO book
            (title,
             author_id,
             price,
             amount)
SELECT title,
       author.author_id,
       price,
       amount
FROM   supply
       INNER JOIN author
               ON supply.author = author.name_author
WHERE  amount <> 0 

/* two queries to update two rows */
UPDATE book
SET    genre_id = (SELECT genre_id
                   FROM   genre
                   WHERE  name_genre = 'Poetry')
WHERE  book_id = 10;

UPDATE book
SET    genre_id = (SELECT genre_id
                   FROM   genre
                   WHERE  name_genre = 'Adventure')
WHERE  book_id = 10; 

/* deleting from a table with a use of subquery */
DELETE FROM author
WHERE  author_id IN (SELECT author_id
                     FROM   book
                     GROUP  BY author_id
                     HAVING Sum(amount) < 20) 

/* another example of deleting from a table with a use of subquery */
DELETE FROM genre
WHERE  genre_id IN (SELECT genre_id
                    FROM   book
                    GROUP  BY genre_id
                    HAVING Count(*) < 4) 

/* deleting from a joined table with a use of subquery */
DELETE
FROM       author
using      author
INNER JOIN book
using     (author_id)
WHERE      genre_id IN
           (
                  SELECT genre_id
                  FROM   genre
                  WHERE  name_genre LIKE 'Poetry' )

/* inserting a value without VALUES keyword */
INSERT INTO client
            (name_client,
             city_id,
             email)
SELECT 'Popov Ilya',
       city_id,
       'popov@test'
FROM   city
WHERE  name_city LIKE 'Moscow' 

/* inserting a value without VALUES keyword */
INSERT INTO buy
            (buy_description,
             client_id)
SELECT 'Contact me',
       client_id
FROM   client
WHERE  name_client LIKE 'Popov Ilya' 

/* inserting two values with SELECT statement */
INSERT INTO buy_book
            (buy_id,
             book_id,
             amount)
SELECT 5,
       book_id,
       2
FROM   book
WHERE  title LIKE 'Lyrics';

INSERT INTO buy_book
            (buy_id,
             book_id,
             amount)
SELECT 5,
       book_id,
       1
FROM   book
WHERE  title LIKE 'The White Guard'; 

/* updating a value with JOIN clause and a condition */
UPDATE book
       JOIN buy_book using(book_id)
SET    book.amount = book.amount - buy_book.amount
WHERE  buy_id = 5 
  
/* creating a table with a select statement */
CREATE TABLE buy_pay AS
  SELECT title,
         name_author,
         price,
         buy_book.amount,
         Sum(buy_book.amount * price) AS Sum
  FROM   author
         JOIN book using(author_id)
         JOIN buy_book using(book_id)
  WHERE  buy_id = 5
  GROUP  BY title,
            name_author,
            price,
            buy_book.amount
  ORDER  BY title 

/* creating a table with a select statement and aggregate functions */
CREATE TABLE buy_pay AS
  SELECT buy_id,
         Sum(buy_book.amount)         AS Amount,
         Sum(price * buy_book.amount) AS Total
  FROM   buy_book
         JOIN book using(book_id)
  WHERE  buy_id = 5
  GROUP  BY buy_id

/* inserting values with the use of CROSS JOIN */
INSERT INTO buy_step
            (buy_id,
             step_id,
             date_step_beg,
             date_step_end)
SELECT 5,
       step_id,
       NULL,
       NULL
FROM   buy
       CROSS JOIN step
WHERE  buy_id = 5 

/* two examples of updating a value in a table with and without the use of JOIN clause */
-- 1
UPDATE buy_step
SET    date_step_beg = '2020-04-12'
WHERE  buy_id = 5
       AND step_id = (SELECT step_id
                      FROM   step
                      WHERE  name_step LIKE 'Payment'); 

-- 2
UPDATE buy_step
       JOIN step using(step_id)
SET    date_step_beg = '2020-04-12'
WHERE  buy_id = 5
       AND name_step LIKE 'Payment'; 
  
/* inserting a value with the use of JOINs */
INSERT INTO attempt
            (student_id,
             subject_id,
             date_attempt)
SELECT attempt.student_id,
       attempt.subject_id,
       Now()
FROM   attempt
       JOIN student
         ON attempt.student_id = student.student_id
       JOIN subject
         ON attempt.subject_id = subject.subject_id
WHERE  name_student LIKE 'Pavel Baranov'
       AND name_subject LIKE 'Databases' 
  
/* two examples of inserting values in a table with and without the use of JOIN clause */
-- 1
INSERT INTO testing
            (attempt_id,
             question_id)
SELECT (SELECT Max(attempt_id)
        FROM   attempt),
       question_id
FROM   question
WHERE  subject_id = (SELECT subject_id
                     FROM   attempt
                     WHERE  attempt_id = (SELECT Max(attempt_id)
                                          FROM   attempt))
ORDER  BY Rand(question_id)
LIMIT  3 

-- 2
INSERT INTO testing
            (attempt_id,
             question_id)
SELECT attempt_id,
       question_id
FROM   attempt
       JOIN question
         ON attempt.subject_id = question.subject_id
WHERE  attempt_id = (SELECT Max(attempt_id)
                     FROM   attempt)
ORDER  BY Rand(question_id)
LIMIT  3 

/* updating a value, calcualtions  */
UPDATE attempt
SET    result = (SELECT Round(Sum(is_correct) / 3 * 100)
                 FROM   testing
                        JOIN answer
                          ON testing.answer_id = answer.answer_id
                 WHERE  attempt_id = 8)
WHERE  attempt_id = 8 

/* deleting values based on condition; cascade deleting  */
DELETE FROM attempt
WHERE  date_attempt < '2020-05-01' 

/* creating a table from a SELECT statement with a JOIN clause   */
CREATE TABLE applicant AS
  SELECT program_enrollee.program_id,
         program_enrollee.enrollee_id,
         Sum(result) AS Summary
  FROM   program_enrollee
         JOIN program_subject
           ON program_enrollee.program_id = program_subject.program_id
         JOIN enrollee_subject
           ON program_subject.subject_id = enrollee_subject.subject_id
              AND enrollee_subject.enrollee_id = program_enrollee.enrollee_id
  GROUP  BY program_enrollee.program_id,
            program_enrollee.enrollee_id
  ORDER  BY program_enrollee.program_id,
            summary DESC 

/* deleting values with a SELECT statement & JOIN clauses */
DELETE FROM applicant
WHERE  ( program_id, enrollee_id ) IN (SELECT program_enrollee.program_id,
                                              program_enrollee.enrollee_id
                                       FROM   program_enrollee
                                              JOIN program_subject
                                                ON
              program_enrollee.program_id = program_subject.program_id
                                              JOIN enrollee_subject
                                                ON
              program_enrollee.enrollee_id = enrollee_subject.enrollee_id
              AND program_subject.subject_id = enrollee_subject.subject_id
                                       WHERE  result < min_result
                                       GROUP  BY program_enrollee.program_id,
                                                 program_enrollee.enrollee_id
                                       ORDER  BY program_enrollee.program_id,
                                                 program_enrollee.enrollee_id) 

/* updating values from a JOINed table  */
UPDATE applicant
JOIN
       (
                 SELECT    enrollee_id,IF(Sum(bonus) IS NULL, 0, Sum(bonus)) as bonus
                 FROM      enrollee_achievement
                 LEFT JOIN achievement
                 ON        enrollee_achievement.achievement_id = achievement.achievement_id
                 GROUP BY  enrollee_id ) t
SET    itog = itog + t.bonus
WHERE  applicant.enrollee_id = t.enrollee_id

/* creating an ordered table from another table and deleting the last table */
CREATE TABLE applicant_order AS
  SELECT *
  FROM   applicant
  ORDER  BY program_id,
            itog DESC;

DROP TABLE applicant; 

/* inserting a column into the table as a first column */
ALTER TABLE applicant_order
  ADD str_id INTEGER first;

/* updating values in a column with the use of variables (SET keyword) */
SET @num_pr := 0;

SET @row_num := 1;

UPDATE applicant_order
SET    str_id = IF(program_id = @num_pr, @row_num := @row_num + 1, @row_num := 1
                                                                   AND
                       @num_pr := @num_pr + 1); 

/* creating a table based on another table */
CREATE TABLE student AS
  SELECT name_program,
         name_enrollee,
         itog
  FROM   applicant_order
         JOIN enrollee
           ON applicant_order.enrollee_id = enrollee.enrollee_id
         JOIN program
           ON applicant_order.program_id = program.program_id
  WHERE  str_id <= PLAN
  ORDER  BY name_program,
            itog DESC; 

/*   */
